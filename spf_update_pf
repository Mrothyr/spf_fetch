#!/bin/sh

#
# Copyright (c) 2016 Aaron Poffenberger <akp@hypernote.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

__progname=$(basename "$0")

TRUE=0
FALSE=1

COMMENTS=$FALSE
FILE='/etc/mail/common_domains'
SPF_FETCH_ARGS=''
TABLE='common_white'

CMD=run
VERSION=1.0

function log_msg {
	local OPTIND o a
	while getopts :p: opt ; do
		case $opt in
			p)
				PAD=$OPTARG
				;;
			*)
				;;
		esac
	done
	shift $(( OPTIND - 1 ))
	msg=$@

	if [ -z "$msg" ] ; then
		return 0
	fi

	if [ -n "$PAD" ] ; then
		printf -v padding "%-${PAD}s" ' '
	fi

	echo "${padding}${msg}"
}

function run {
	has_table=$(pfctl -s Tables | grep "$TABLE")

	if [[ -n "$has_table" && -e "$FILE" ]] ; then
		output="${FILE}_ips"
		rm -f "${output}"

		spf_fetch -c -f "$FILE" \
		     "$SPF_FETCH_ARGS" >> "${output}"

		pfctl -t "$TABLE" -T replace -f "${output}"
	elif [ -z "$has_table" ] ; then
		echo Table not found: ${table}

		exit 2
	elif [ ! -e "$FILE" ] ; then
		echo File not found: $FILE

		exit 1
	else
		echo Unknown error

		exit 1
	fi
}

function version {
	log_msg "$__basename $VERSION"
}

function usage {
	# dispose of stdin data
	if [ ! -t 0 ] ; then
		cat > /dev/null
	fi

	usage="usage: $__progname"
	pad=${#usage}

	log_msg "$usage [-afhtv] [-a spf_fetch_args] [-f file] [-h] [-t table] [-v]"
}

while getopts :a:f:ht:v opt ; do
	case $opt in
		a)
			SPF_FETCH_ARGS=$OPTARG
			;;
		f)
			FILE=$OPTARG
			;;
		h)
			CMD="usage"
			;;
		t)
			TABLE=$OPTARG
			;;
		v)
			CMD="VERSION"
			;;
		:)
			log_msg $__progname: option requires an argument \
				-- $OPTARG
			log_msg
			CMD=abort
			;;
		\?)
			log_msg $__progname: invalid option -- $OPTARG
			log_msg
			CMD=abort
			;;
	esac
done
shift $(( OPTIND - 1 ))

case $CMD in
	run)
		run
		;;
	usage)
		usage
		;;
	version)
		version
		;;
	*)
		usage
		;;
esac
